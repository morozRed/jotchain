# Name of your application. Used to uniquely configure containers.
service: jotchain

# Name of the container image.
image: morozgrigory/jotchain

# Deploy to these servers.
servers:
  web:
    hosts:
      - jotchain_web
  job:
    hosts:
      - jotchain_web
    cmd: bin/jobs

  # Uncomment to enable SSR:
  # vite_ssr:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bundle exec vite ssr
  #   options:
  #     network-alias: vite_ssr

ssh:
  keys: [ "~/.ssh/jotchain_hetzner_ed25519" ]

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: app.jotchain.com

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: morozgrigory

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY
    - ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT
    - ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY
    - ADMIN_PASSWORD
    - ADMIN_USERNAME
    - DATABASE_PASSWORD
    - KAMAL_REGISTRY_PASSWORD
    - NOTIFICATIONS_MAILER_API_KEY
    - OPENAI_API_KEY
    - RAILS_MASTER_KEY
    - STRIPE_MONTHLY_PRICE_ID
    - STRIPE_PUBLISHABLE_KEY
    - STRIPE_SECRET_KEY
    - STRIPE_YEARLY_PRICE_ID
    - SUBSCRIPTION_PRODUCT_ID
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true

    # Uncomment to enable SSR:
    # INERTIA_SSR_ENABLED: true
    # INERTIA_SSR_URL: "http://vite_ssr:13714"

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use react_starter_kit-db for a db accessory server on same machine via local kamal docker network.
    DB_HOST: jotchain-db
    DB_PORT: 5432
    DB_USER: jotchain
    DB_DATABASE: jotchain_production

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "/mnt/jotchain_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public

# Configure the image builder.
builder:
  arch: amd64
  secrets:
    - RAILS_MASTER_KEY
    - STRIPE_SECRET_KEY
    - ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY
    - ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT
    - ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:18
    host: jotchain_db
    port: 5432
    env:
      clear:
        POSTGRES_DB: jotchain_production
        POSTGRES_USER: jotchain
        # Bind to all interfaces on private network
        POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      secret:
        - POSTGRES_PASSWORD
    files:
      - config/postgres/production.conf:/etc/postgresql/postgresql.conf
    directories:
      - data:/var/lib/postgresql/data
    cmd: postgres -c shared_buffers=512MB -c max_connections=120 -c effective_cache_size=1536MB -c maintenance_work_mem=128MB -c work_mem=2MB -c random_page_cost=1.1 -c wal_buffers=16MB -c checkpoint_timeout=15min -c checkpoint_completion_target=0.9 -c max_wal_size=1GB -c min_wal_size=80MB -c autovacuum=on -c autovacuum_vacuum_threshold=50 -c autovacuum_vacuum_scale_factor=0.1 -c autovacuum_analyze_threshold=50 -c autovacuum_analyze_scale_factor=0.05 -c autovacuum_max_workers=3 -c autovacuum_naptime=30s -c autovacuum_vacuum_cost_limit=400 -c autovacuum_vacuum_insert_threshold=1000 -c autovacuum_vacuum_insert_scale_factor=0.01 -c log_min_duration_statement=1000 -c log_checkpoints=on -c log_connections=on -c log_disconnections=on -c log_lock_waits=on -c deadlock_timeout=1s -c track_io_timing=on -c track_functions=all -c temp_file_limit=5GB -c statement_timeout=1800000 -c idle_in_transaction_session_timeout=300000
